#!/usr/bin/env bpftrace
/** @file

  Print SystemTap ATS probes.

  @section license License

  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

 */


BEGIN
{
  @readlines = 0;
  @origin_connection_count = 0;
  printf("Monitoring ATS connections and transactions...\n");
}


interval:s:1
{

// Iterate over elements in @lasttransaction map
    for ($kv : @lasttransaction)
    {
        $conn_id = $kv.0; // Get client IP (key)
        $last_txn_time = $kv.1; // Get last transaction time (value)
        $idle_threshold_ns = 60 * 1000000000; // 60 seconds in nanoseconds
        $time_since_last_txn = nsecs - $last_txn_time;

        printf("Conn ID: %d, Time since last txn: %d s\n", $conn_id, $time_since_last_txn / 1000000000);

        
            

            // Check if connection is idle
            if ($last_txn_time != 0 && (int64)$time_since_last_txn > $idle_threshold_ns && @idle_marked[$conn_id] == 0)
            {
                $client_ip = @conn_id_to_ip[$conn_id];
                // Increment idle connection count
                if ($client_ip != "")
                {
                    // Increment idle connection count
                    @idle_connections[$client_ip]++;
                    printf("Idle connection from IP: %s\n", $client_ip);
                    @idle_marked[$conn_id] = 1; // Mark this connection as already announced idle
                }
                else
                {
                    printf("Warning: No IP found for conn_id: %d\n", $conn_id);
                }
            }
            else
            {
                printf("Not marking as idle: last_txn_time=%d, time_since_last_txn=%d, idle_marked=%d\n", 
                   $last_txn_time, $time_since_last_txn, @idle_marked[$conn_id]);
            }
        
    }

    // Origin connection check
    for ($kv : @last_origin_transaction)
    {
        $conn_id = $kv.0;
        $last_txn_time = $kv.1;
        $idle_threshold_ns = 60 * 1000000000; // 60 seconds in nanoseconds
        $time_since_last_txn = nsecs - $last_txn_time;

        printf("Origin Conn ID: %d, Time since last txn: %d s\n", $conn_id, $time_since_last_txn / 1000000000);

        // Check if origin connection is idle
        if ($last_txn_time != 0 && (int64)$time_since_last_txn > $idle_threshold_ns && @idle_origin_marked[$conn_id] == 0)
        {
            $server_ip = @origin_connections[$conn_id];
            if ($server_ip != "")
            {
                printf("Marking idle origin connection to IP: %s\n", $server_ip);
                @idle_origin_marked[$conn_id] = 1; // Mark this connection as idle
            }
            else
            {
                printf("Warning: No IP found for origin conn_id: %d\n", $conn_id);
            }
        }
    }
}


// Attach to the new_origin_server_connection probe
 usdt:*:new_origin_server_connection
 {  
    $server_name = str(arg0);
    $conn_id = arg1;
    $ip = str(arg2);
    printf("new_origin_server_connection: Server: %s, Conn ID: %d, IP: %s\n", $server_name, $conn_id, $ip);
    @origin_connections[$conn_id] = $ip;
    @last_origin_transaction[$conn_id] = nsecs; // Initialize last transaction time
    @idle_origin_marked[$conn_id] = 0;
    @origin_connection_count++;
    @readlines++;
 }


// Attach to the start_connection_with_ip_addresses probe and count connections by client IP

usdt:*:start_connection_with_ip_addresses
 {    
    
    $client_ip = str(arg2);
    $conn_id = arg1;

    printf("New connection from IP: %s\n", $client_ip);
    @connections[$client_ip]++; // Count connections by client IP
    @lasttransaction[$conn_id] = nsecs; // Store last transaction time with client IP
    @conn_id_to_ip[$conn_id] = $client_ip;
    @idle_marked[$conn_id];
    printf("Added mapping: conn_id %d -> IP %s\n", $conn_id, $client_ip);
    
 }

// Attach to the connection_closed probe to remove connection from maps
usdt:*:connection_closed
{
    $conn_id = arg0;
    $client_ip = @conn_id_to_ip[$conn_id];
    printf("Connection closed: conn_id %d, IP %s\n", $conn_id, $client_ip);
    @closed_connections[$client_ip]++;
    delete(@lasttransaction[$conn_id]);
    printf("Removed mapping for conn_id %d\n", $conn_id);
}

usdt:*:HTTP2_connection_closed
{
    $conn_id = arg0;
    $client_ip = @conn_id_to_ip[$conn_id];
    printf("HTTP/2 Connection closed: conn_id %d, IP %s\n", $conn_id, $client_ip);
    @http2_closed_connections[$client_ip]++;
    delete(@lasttransaction[$conn_id]);
    delete(@conn_id_to_ip[$conn_id]);
    delete(@idle_marked[$conn_id]);
    printf("Removed mapping for HTTP/2 conn_id %d\n", $conn_id);
}

usdt:*:transaction_finished
{
    $conn_id = arg0;
    if (@lasttransaction[$conn_id]) {
        $client_ip = @conn_id_to_ip[$conn_id];
        printf("Transaction finished: conn_id %d\n", $conn_id);
        @lasttransaction[$conn_id] = nsecs; // Update last transaction time
        @idle_marked[$conn_id] = 0; //Reset the Idle Mark
   }
}

// Added a probe to handle origin connection closure
usdt:*:origin_connection_closed
{
    $conn_id = arg0;
    $server_ip = @origin_connections[$conn_id];
    printf("Origin connection closed: conn_id %d, IP %s\n", $conn_id, $server_ip);
    // Check if the connection was idle before closing
    if (@idle_origin_marked[$conn_id] == 1) {
        @idle_origin_connections[$server_ip]++;
        printf("Closed idle origin connection to IP: %s\n", $server_ip);
    }
    @closed_origin_connections[$server_ip]++;
    delete(@last_origin_transaction[$conn_id]);
    delete(@origin_connections[$conn_id]);
    delete(@idle_origin_marked[$conn_id]);
}

// Print the result on exit

END
{
    printf("\nFinal Statistics:\n");
    printf("Connections by client IP:\n");
    print(@connections);
    printf("\nClosed connections by client IP:\n");
    print(@closed_connections);
    printf("\nHTTP/2 Closed connections by client IP:\n");
    print(@http2_closed_connections);
    printf("\nTotal lines read: %d\n", @readlines);
    printf("\nLast transaction timestamps by connection ID:\n");
    print(@lasttransaction);
    printf("\nFinal Idle Connections:\n");
    print(@idle_connections);
    printf("\nIdle marked connections:\n");
    print(@idle_marked);
    printf("\nConnection ID to IP mapping:\n");
    print(@conn_id_to_ip);
     printf("\nOrigin connections by conn_id:\n");
    print(@origin_connections);
    printf("\nTotal origin connections: %d\n", @origin_connection_count);
    printf("\nIdle Origin Connections:\n");
    print(@idle_origin_connections);
    printf("\nIdle marked origin connections:\n");
    print(@idle_origin_marked);
    printf("\nClosed origin connections:\n");
    print(@closed_origin_connections);

}
    